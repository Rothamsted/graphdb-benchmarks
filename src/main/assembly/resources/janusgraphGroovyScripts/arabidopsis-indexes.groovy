:remote connect tinkerpop.server conf/remote.yaml session 
:remote console 
graph.tx().commit()
m = graph.openManagement()
m.makePropertyKey('labelV-idx').dataType(String.class).make()
m.makePropertyKey('labelE-idx').dataType(String.class).make()
m.makeVertexLabel('DataSource:Resource').make()
m.makeVertexLabel('Comp:Concept:Resource').make()
m.makeVertexLabel('Concept:Resource:Transport').make()
m.makeVertexLabel('Concept:MolFunc:Resource').make()
m.makeVertexLabel('Concept:EC:Resource').make()
m.makeVertexLabel('Concept:Enzyme:Resource').make()
m.makeVertexLabel('BioProc:Concept:Resource').make()
m.makeVertexLabel('Concept:Path:Resource').make()
m.makeVertexLabel('Concept:Protcmplx:Resource').make()
m.makeVertexLabel('Concept:Gene:Resource').make()
m.makeVertexLabel('Accession:Resource').make()
m.makeVertexLabel('CelComp:Concept:Resource').make()
m.makeVertexLabel('Concept:Publication:Resource').make()
m.makeVertexLabel('Concept:Resource:SNP').make()
m.makeVertexLabel('Concept:Reaction:Resource').make()
m.makeVertexLabel('Concept:ProtDomain:Resource').make()
m.makeVertexLabel('EvidenceType:Resource').make()
m.makeVertexLabel('Concept:Resource:Trait').make()
m.makeVertexLabel('Concept:Phenotype:Resource').make()
m.makeVertexLabel('Concept:Protein:Resource').make()
m.makePropertyKey('CML_1').dataType(String.class).make()
m.makePropertyKey('JOURNAL_REF').dataType(String.class).make()
m.makePropertyKey('CML_2').dataType(String.class).make()
m.makePropertyKey('PUB_1').dataType(String.class).make()
m.makePropertyKey('Description').dataType(String.class).make()
m.makePropertyKey('Mr').dataType(String.class).make()
m.makePropertyKey('Phenotype_1').dataType(String.class).make()
m.makePropertyKey('description').dataType(String.class).make()
m.makePropertyKey('BEGIN').dataType(String.class).make()
m.makePropertyKey('AA_1').dataType(String.class).make()
m.makePropertyKey('Chromosome_1').dataType(String.class).make()
m.makePropertyKey('PUB_TYPE').dataType(String.class).make()
m.makePropertyKey('Mr_1').dataType(String.class).make()
m.makePropertyKey('YEAR').dataType(String.class).make()
m.makePropertyKey('Abstract_1').dataType(String.class).make()
m.makePropertyKey('Pheno').dataType(String.class).make()
m.makePropertyKey('TAXID').dataType(String.class).make()
m.makePropertyKey('BEGIN_2').dataType(String.class).make()
m.makePropertyKey('altName').dataType(String.class).make()
m.makePropertyKey('END_1').dataType(String.class).make()
m.makePropertyKey('END_2').dataType(String.class).make()
m.makePropertyKey('PUB_2').dataType(String.class).make()
m.makePropertyKey('BEGIN_1').dataType(String.class).make()
m.makePropertyKey('AA').dataType(String.class).make()
m.makePropertyKey('iri').dataType(String.class).make()
m.makePropertyKey('identifier').dataType(String.class).make()
m.makePropertyKey('Study').dataType(String.class).make()
m.makePropertyKey('CML').dataType(String.class).make()
m.makePropertyKey('AbstractHeader').dataType(String.class).make()
m.makePropertyKey('isAmbiguousAccession').dataType(String.class).make()
m.makePropertyKey('Abstract').dataType(String.class).make()
m.makePropertyKey('Chromosome').dataType(String.class).make()
m.makePropertyKey('MeSH').dataType(String.class).make()
m.makePropertyKey('ondexId').dataType(String.class).make()
m.makePropertyKey('AUTHORS').dataType(String.class).make()
m.makePropertyKey('prefName').dataType(String.class).make()
m.makePropertyKey('Pheno_1').dataType(String.class).make()
m.makePropertyKey('labelV').dataType(String.class).make()
m.makePropertyKey('Phenotype').dataType(String.class).make()
m.makePropertyKey('Chemical').dataType(String.class).make()
m.makePropertyKey('AbstractHeader_1').dataType(String.class).make()
m.makePropertyKey('comment').dataType(String.class).make()
m.makePropertyKey('END').dataType(String.class).make()
m.makePropertyKey('knetLabel').dataType(String.class).make()
m.makeEdgeLabel('evidence').multiplicity(MULTI).make()
m.makeEdgeLabel('associated_with').multiplicity(MULTI).make()
m.makeEdgeLabel('has_domain').multiplicity(MULTI).make()
m.makeEdgeLabel('equ').multiplicity(MULTI).make()
m.makeEdgeLabel('in_by').multiplicity(MULTI).make()
m.makeEdgeLabel('has_variation').multiplicity(MULTI).make()
m.makeEdgeLabel('pos_reg').multiplicity(MULTI).make()
m.makeEdgeLabel('cooc_wi').multiplicity(MULTI).make()
m.makeEdgeLabel('relatedConcept').multiplicity(MULTI).make()
m.makeEdgeLabel('has_observ_pheno').multiplicity(MULTI).make()
m.makeEdgeLabel('ac_by').multiplicity(MULTI).make()
m.makeEdgeLabel('participates_in').multiplicity(MULTI).make()
m.makeEdgeLabel('para').multiplicity(MULTI).make()
m.makeEdgeLabel('has_function').multiplicity(MULTI).make()
m.makeEdgeLabel('pub_in').multiplicity(MULTI).make()
m.makeEdgeLabel('located_in').multiplicity(MULTI).make()
m.makeEdgeLabel('cat_c').multiplicity(MULTI).make()
m.makeEdgeLabel('enc').multiplicity(MULTI).make()
m.makeEdgeLabel('pd_by').multiplicity(MULTI).make()
m.makeEdgeLabel('physical').multiplicity(MULTI).make()
m.makeEdgeLabel('participates_not').multiplicity(MULTI).make()
m.makeEdgeLabel('part_of').multiplicity(MULTI).make()
m.makeEdgeLabel('genetic').multiplicity(MULTI).make()
m.makeEdgeLabel('dc_identifier').multiplicity(MULTI).make()
m.makeEdgeLabel('xref').multiplicity(MULTI).make()
m.makeEdgeLabel('is_part_of').multiplicity(MULTI).make()
m.makeEdgeLabel('ortho').multiplicity(MULTI).make()
m.makeEdgeLabel('cs_by').multiplicity(MULTI).make()
m.makeEdgeLabel('regulates').multiplicity(MULTI).make()
m.makeEdgeLabel('h_s_s').multiplicity(MULTI).make()
m.makeEdgeLabel('ca_by').multiplicity(MULTI).make()
m.makeEdgeLabel('neg_reg').multiplicity(MULTI).make()
m.makeEdgeLabel('not_located_in').multiplicity(MULTI).make()
m.makeEdgeLabel('dataSource').multiplicity(MULTI).make()
m.makeEdgeLabel('is_a').multiplicity(MULTI).make()
m.makeEdgeLabel('not_function').multiplicity(MULTI).make()
m.makePropertyKey('DataSource_8').dataType(String.class).make()
m.makePropertyKey('TARGETSTART_2').dataType(String.class).make()
m.makePropertyKey('labelE').dataType(String.class).make()
m.makePropertyKey('PERCENTTARGET').dataType(String.class).make()
m.makePropertyKey('DataSource_9').dataType(String.class).make()
m.makePropertyKey('DataSource_6').dataType(String.class).make()
m.makePropertyKey('DataSource_7').dataType(String.class).make()
m.makePropertyKey('DataSource_4').dataType(String.class).make()
m.makePropertyKey('DataSource_5').dataType(String.class).make()
m.makePropertyKey('DataSource_2').dataType(String.class).make()
m.makePropertyKey('DataSource_3').dataType(String.class).make()
m.makePropertyKey('TARGETSTART_1').dataType(String.class).make()
m.makePropertyKey('DataSource_1').dataType(String.class).make()
m.makePropertyKey('TARGETLENGTH').dataType(String.class).make()
m.makePropertyKey('QUERYEND').dataType(String.class).make()
m.makePropertyKey('PERCENTALIGNMENT').dataType(String.class).make()
m.makePropertyKey('CoSenNum').dataType(String.class).make()
m.makePropertyKey('QUERYSTART_2').dataType(String.class).make()
m.makePropertyKey('Classification').dataType(String.class).make()
m.makePropertyKey('QUERYSTART_1').dataType(String.class).make()
m.makePropertyKey('TARGETLENGTH_1').dataType(String.class).make()
m.makePropertyKey('TARGETLENGTH_2').dataType(String.class).make()
m.makePropertyKey('relatedConceptValue').dataType(String.class).make()
m.makePropertyKey('ALGORITHM_1').dataType(String.class).make()
m.makePropertyKey('ALGORITHM_2').dataType(String.class).make()
m.makePropertyKey('EVIDENCE').dataType(String.class).make()
m.makePropertyKey('DataSource').dataType(String.class).make()
m.makePropertyKey('QUERYEND_1').dataType(String.class).make()
m.makePropertyKey('QUERYEND_2').dataType(String.class).make()
m.makePropertyKey('Author').dataType(String.class).make()
m.makePropertyKey('evidenceValue').dataType(String.class).make()
m.makePropertyKey('Experimental_System').dataType(String.class).make()
m.makePropertyKey('Germplasm_1').dataType(String.class).make()
m.makePropertyKey('E_VALUE_2').dataType(String.class).make()
m.makePropertyKey('Germplasm').dataType(String.class).make()
m.makePropertyKey('E_VALUE_1').dataType(String.class).make()
m.makePropertyKey('PERCENTQUERY_1').dataType(String.class).make()
m.makePropertyKey('PERCENTQUERY_2').dataType(String.class).make()
m.makePropertyKey('Experimental_3').dataType(String.class).make()
m.makePropertyKey('Experimental_1').dataType(String.class).make()
m.makePropertyKey('Experimental_2').dataType(String.class).make()
m.makePropertyKey('PVALUE').dataType(String.class).make()
m.makePropertyKey('QUERYSTART').dataType(String.class).make()
m.makePropertyKey('Distance_to_1').dataType(String.class).make()
m.makePropertyKey('PMID_1').dataType(String.class).make()
m.makePropertyKey('toIri').dataType(String.class).make()
m.makePropertyKey('QUERYLENGTH').dataType(String.class).make()
m.makePropertyKey('TARGETSTART').dataType(String.class).make()
m.makePropertyKey('Consequence_to_transcript').dataType(String.class).make()
m.makePropertyKey('Throughput_3').dataType(String.class).make()
m.makePropertyKey('Throughput_2').dataType(String.class).make()
m.makePropertyKey('Throughput_1').dataType(String.class).make()
m.makePropertyKey('PubMed').dataType(String.class).make()
m.makePropertyKey('Distance_to_transcript').dataType(String.class).make()
m.makePropertyKey('CoCitNum').dataType(String.class).make()
m.makePropertyKey('PubMed_2').dataType(String.class).make()
m.makePropertyKey('PubMed_3').dataType(String.class).make()
m.makePropertyKey('PubMed_1').dataType(String.class).make()
m.makePropertyKey('PERCENTALIGNMENT_2').dataType(String.class).make()
m.makePropertyKey('PERCENTALIGNMENT_1').dataType(String.class).make()
m.makePropertyKey('Consequence_to_1').dataType(String.class).make()
m.makePropertyKey('QUERYLENGTH_2').dataType(String.class).make()
m.makePropertyKey('QUERYLENGTH_1').dataType(String.class).make()
m.makePropertyKey('PERCENTTARGET_1').dataType(String.class).make()
m.makePropertyKey('PERCENTTARGET_2').dataType(String.class).make()
m.makePropertyKey('PERCENTQUERY').dataType(String.class).make()
m.makePropertyKey('SCORE').dataType(String.class).make()
m.makePropertyKey('fromIri').dataType(String.class).make()
m.makePropertyKey('IP_TFIDF').dataType(String.class).make()
m.makePropertyKey('ALGORITHM').dataType(String.class).make()
m.makePropertyKey('Throughput').dataType(String.class).make()
m.makePropertyKey('DataSource_10').dataType(String.class).make()
m.makePropertyKey('DataSource_11').dataType(String.class).make()
m.makePropertyKey('E_VALUE').dataType(String.class).make()
m.makePropertyKey('DataSource_12').dataType(String.class).make()
m.makePropertyKey('DataSource_13').dataType(String.class).make()
m.makePropertyKey('DataSource_14').dataType(String.class).make()
m.makePropertyKey('DataSource_15').dataType(String.class).make()
m.makePropertyKey('DataSource_16').dataType(String.class).make()
m.makePropertyKey('Author_1').dataType(String.class).make()
m.makePropertyKey('TARGETEND_2').dataType(String.class).make()
m.makePropertyKey('TARGETEND_1').dataType(String.class).make()
m.makePropertyKey('Author_3').dataType(String.class).make()
m.makePropertyKey('Author_2').dataType(String.class).make()
m.makePropertyKey('SCORE_2').dataType(String.class).make()
m.makePropertyKey('MAX_TFIDF').dataType(String.class).make()
m.makePropertyKey('SCORE_1').dataType(String.class).make()
m.makePropertyKey('DataSource_17').dataType(String.class).make()
m.makePropertyKey('DataSource_18').dataType(String.class).make()
m.makePropertyKey('Classification_1').dataType(String.class).make()
m.makePropertyKey('DataSource_19').dataType(String.class).make()
m.makePropertyKey('DataSource_20').dataType(String.class).make()
m.makePropertyKey('TARGETEND').dataType(String.class).make()
m.makePropertyKey('DataSource_21').dataType(String.class).make()
m.makePropertyKey('DataSource_22').dataType(String.class).make()
m.makePropertyKey('DataSource_23').dataType(String.class).make()
m.makePropertyKey('DataSource_24').dataType(String.class).make()
m.makePropertyKey('DataSource_25').dataType(String.class).make()
m.makePropertyKey('DataSource_26').dataType(String.class).make()
m.makePropertyKey('DataSource_27').dataType(String.class).make()
m.makePropertyKey('PMID').dataType(String.class).make()
m.commit()


graph.tx().commit()
m = graph.openManagement()
prop = m.getPropertyKey('iri')
m.buildIndex('iriComp', Vertex.class).addKey(prop).buildCompositeIndex()
prop = m.getPropertyKey('iri')
m.buildIndex('iriMixed', Vertex.class).addKey(prop).buildMixedIndex('search')

prop = m.getPropertyKey('labelV-idx')
m.buildIndex('labelVComp', Vertex.class).addKey(prop).buildCompositeIndex()
prop = m.getPropertyKey('labelV-idx')
m.buildIndex('labelVMixed', Vertex.class).addKey(prop).buildMixedIndex('search')

prop = m.getPropertyKey('labelE-idx')
m.buildIndex('labelEComp', Edge.class).addKey(prop).buildCompositeIndex()
prop = m.getPropertyKey('labelE-idx')
m.buildIndex('labelEMixed', Edge.class).addKey(prop).buildMixedIndex('search')

prop = m.getPropertyKey('identifier')
m.buildIndex('identifierComp', Vertex.class).addKey(prop).buildCompositeIndex()
prop = m.getPropertyKey('identifier')
m.buildIndex('identifierMixed', Vertex.class).addKey(prop).buildMixedIndex('search')

prop = m.getPropertyKey('prefName')
m.buildIndex('prefNameComp', Vertex.class).addKey(prop).buildCompositeIndex()
prop = m.getPropertyKey('prefName')
m.buildIndex('prefNameMixed', Vertex.class).addKey(prop).buildMixedIndex('search')

prop = m.getPropertyKey('altName')
m.buildIndex('altNameComp', Vertex.class).addKey(prop).buildCompositeIndex()
prop = m.getPropertyKey('altName')
m.buildIndex('altNameMixed', Vertex.class).addKey(prop).buildMixedIndex('search')

prop = m.getPropertyKey('knetLabel')
m.buildIndex('knetLabelComp', Vertex.class).addKey(prop).buildCompositeIndex()
prop = m.getPropertyKey('knetLabel')
m.buildIndex('knetLabelMixed', Vertex.class).addKey(prop).buildMixedIndex('search')


m.commit()
ManagementSystem.awaitGraphIndexStatus(graph, 'iriComp').call()
ManagementSystem.awaitGraphIndexStatus(graph, 'iriMixed').call()
ManagementSystem.awaitGraphIndexStatus(graph, 'labelVComp').call()
ManagementSystem.awaitGraphIndexStatus(graph, 'labelVMixed').call()
ManagementSystem.awaitGraphIndexStatus(graph, 'labelEComp').call()
ManagementSystem.awaitGraphIndexStatus(graph, 'labelEMixed').call()

ManagementSystem.awaitGraphIndexStatus(graph, 'identifierComp').call()
ManagementSystem.awaitGraphIndexStatus(graph, 'identifierMixed').call()
ManagementSystem.awaitGraphIndexStatus(graph, 'prefNameComp').call()
ManagementSystem.awaitGraphIndexStatus(graph, 'prefNameMixed').call()
ManagementSystem.awaitGraphIndexStatus(graph, 'altNameComp').call()
ManagementSystem.awaitGraphIndexStatus(graph, 'altNameMixed').call()
ManagementSystem.awaitGraphIndexStatus(graph, 'knetLabelComp').call()
ManagementSystem.awaitGraphIndexStatus(graph, 'knetLabelMixed').call()

graph.tx().commit()
m = graph.openManagement()
idx = m.getGraphIndex('iriComp')
m.updateIndex(idx, SchemaAction.ENABLE_INDEX)
idx = m.getGraphIndex('iriMixed')
m.updateIndex(idx, SchemaAction.ENABLE_INDEX)

idx = m.getGraphIndex('labelVComp')
m.updateIndex(idx, SchemaAction.ENABLE_INDEX)
idx = m.getGraphIndex('labelVMixed')
m.updateIndex(idx, SchemaAction.ENABLE_INDEX)

idx = m.getGraphIndex('labelEComp')
m.updateIndex(idx, SchemaAction.ENABLE_INDEX)
idx = m.getGraphIndex('labelEMixed')
m.updateIndex(idx, SchemaAction.ENABLE_INDEX)


idx = m.getGraphIndex('identifierComp')
m.updateIndex(idx, SchemaAction.ENABLE_INDEX)
idx = m.getGraphIndex('identifierMixed')
m.updateIndex(idx, SchemaAction.ENABLE_INDEX)

idx = m.getGraphIndex('prefNameComp')
m.updateIndex(idx, SchemaAction.ENABLE_INDEX)
idx = m.getGraphIndex('prefNameMixed')
m.updateIndex(idx, SchemaAction.ENABLE_INDEX)

idx = m.getGraphIndex('altNameComp')
m.updateIndex(idx, SchemaAction.ENABLE_INDEX)
idx = m.getGraphIndex('altNameMixed')
m.updateIndex(idx, SchemaAction.ENABLE_INDEX)

idx = m.getGraphIndex('knetLabelComp')
m.updateIndex(idx, SchemaAction.ENABLE_INDEX)
idx = m.getGraphIndex('knetLabelMixed')
m.updateIndex(idx, SchemaAction.ENABLE_INDEX)

m.commit()
graph.tx().commit()
:exit
