/*
  See here regarding the optimisation of an initial version: https://stackoverflow.com/questions/76527659
  
  This doesn't need to use query-external variables (uses the side effect instead) and uses a cache to
  keep intermediate results in memory.
  
  ArcadeDB allows for Groovy imports. 
*/
import org.codehaus.groovy.runtime.memoize.CommonCache
import java.util.concurrent.ConcurrentHashMap

g.withSideEffect ( 'evLabels', new CommonCache( new ConcurrentHashMap () ) )

  .V().hasLabel ( 'Concept:Protcmplx:Resource' ).as ( 'cpx' )
  // Trying to put the limit early-on
  .inE().hasLabel ( 'is_part_of' )
  // Trying to put the limit early-on
  .order ().by ( shuffle ).limit ( 100 ).as ( 'pr' )
  
  .outV ().hasLabel ( 'Concept:Protein:Resource' ).as ( 'p' )

.select ( 'p', 'cpx', 'pr' )
  .by ( coalesce ( values ( 'prefName' ), constant ( '' ) ) )
  .by ( coalesce ( values ( 'prefName' ), constant ( '' ) ) )
  .by ( map{
    pr = it.get()
    evIri = pr.value ( 'evidence' )
    if ( !evIri ) return "<NA>"

    evLabels = it.getSideEffects().get ( 'evLabels' )
    lbl = evLabels [ evIri ]
    if ( lbl ) return lbl
       
    lbl = g.V().hasLabel ( 'EvidenceType:Resource' )
             .has ( 'iri', evIri )
             .values ( 'label' ).next ()
    evLabels [ evIri ] = lbl == null ? "" : lbl
    return lbl;
  })
