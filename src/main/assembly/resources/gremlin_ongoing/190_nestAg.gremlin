g.V().has('labelV-idx', 'Concept:Path:Resource').limit(100).
	group().
		by('prefName').
		by(__.inE().has('labelE-idx', 'part_of').outV().
				has('labelV-idx','Concept:Reaction:Resource').as('r').
			project('nReact', 'avgProt').
			by(__.dedup().count()).
			by(select('r').local(
			__.in('pd_by','cs_by').has('labelV-idx','Concept:Protein:Resource').as('prot').
				dedup().count()).mean())).unfold().
	filter(select(values).select('avgProt').is(gt(0))))





g.V().has('labelV-idx', 'Concept:Path:Resource').limit(100).
	group().
		by('prefName').
		by(
			__.as('ini').
			project('nReact', 'avgProt').
				by(	select('ini').inE().has('labelE-idx', 'part_of').outV().
				has('labelV-idx','Concept:Reaction:Resource').dedup().count()
						).
				by(
					select('ini').local(inE().has('labelE-idx', 'part_of').outV().
						has('labelV-idx','Concept:Reaction:Resource').
						local(__.in('pd_by','cs_by').has('labelV-idx','Concept:Protein:Resource').as('prot').
							dedup().count()).mean())
				)
		)

g.withSack{[:]}{it.clone()}.V().has('labelV-idx', 'Concept:Path:Resource').limit(50).
	group().
		by('prefName').
		by(__.as('ini').
			union(select('ini').local(__.inE().has('labelE-idx', 'part_of').outV().
						has('labelV-idx','Concept:Reaction:Resource').
						local(__.in('pd_by','cs_by').has('labelV-idx','Concept:Protein:Resource').as('prot').
							dedup().count()).mean().sack{m,v->m['avgProt']=v;m}), 
					select('ini').inE().has('labelE-idx', 'part_of').outV().
				has('labelV-idx','Concept:Reaction:Resource').dedup().count().sack{m,v->m['nReact']=v;m}
				
				).sack()
		).unfold()
		
g.withSack{[:]}{it.clone()}.V().has('labelV-idx', 'Concept:Path:Resource').limit(50).sack{m,v->m['prefName']=v.values('prefName').next();m}.
	local(__.as('ini').
			union(select('ini').local(__.inE().has('labelE-idx', 'part_of').outV().
						has('labelV-idx','Concept:Reaction:Resource').
						local(__.in('pd_by','cs_by').has('labelV-idx','Concept:Protein:Resource').as('prot').
							dedup().count()).mean().sack{m,v->m['avgProt']=v;m}), 
					select('ini').inE().has('labelE-idx', 'part_of').outV().
				has('labelV-idx','Concept:Reaction:Resource').dedup().count().sack{m,v->m['nReact']=v;m}
				
				)
		).sack().map{x->[pwy:x.get()['prefName'], nReact:x.get()['nReact'], avgProt:x.get()['avgProt']]}.limit(100)
	
		
g.V().has('labelV-idx', 'Concept:Path:Resource').limit(50).
	group().
		by('prefName').
		by(
			project('avgProt').
			by(inE().has('labelE-idx', 'part_of').outV().
				has('labelV-idx','Concept:Reaction:Resource').dedup().count())
		)
				
		__.inE().has('labelE-idx', 'part_of').outV().
				has('labelV-idx','Concept:Reaction:Resource').as('r').
			by(__.dedup().count()).
			by(select('r').local(
			__.in('pd_by','cs_by').has('labelV-idx','Concept:Protein:Resource').as('prot').
				dedup().count()).mean())).unfold().
	filter(select(values).select('avgProt').is(gt(0))))
	
g.withSack(0).V().has('labelV-idx', 'Concept:Path:Resource').limit(10).as('p').
	project('pref','cnt').
		by(select('p').by('prefName')).
		by(local(inE().has('labelE-idx', 'part_of').outV().
		has('labelV-idx','Concept:Reaction:Resource').as('r').dedup().count()))

				
g.V().has('labelV-idx', 'Concept:Path:Resource').limit(10).
	group().
		by('prefName').
		by(__.inE().has('labelE-idx', 'part_of').outV().
				has('labelV-idx','Concept:Reaction:Resource').as('r').project('cnt').by(count())).unfold()
				==>7
